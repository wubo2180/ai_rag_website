# Generated by Django 5.2.7 on 2025-10-19 06:25

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('knowledge', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='knowledgechunk',
            options={'verbose_name': '知识块', 'verbose_name_plural': '知识块'},
        ),
        migrations.CreateModel(
            name='Formula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='配方编码')),
                ('name', models.CharField(max_length=200, verbose_name='配方名称')),
                ('version', models.CharField(default='1.0', max_length=20, verbose_name='版本号')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('testing', '测试中'), ('validated', '已验证'), ('production', '生产中'), ('archived', '已归档')], default='draft', max_length=20, verbose_name='状态')),
                ('application_type', models.CharField(choices=[('sealant', '密封胶'), ('adhesive', '粘合剂'), ('coating', '涂料'), ('composite', '复合材料'), ('other', '其他')], max_length=20, verbose_name='应用类型')),
                ('mixing_temperature', models.FloatField(blank=True, null=True, verbose_name='混合温度 (℃)')),
                ('mixing_time', models.FloatField(blank=True, null=True, verbose_name='混合时间 (min)')),
                ('curing_temperature', models.FloatField(blank=True, null=True, verbose_name='固化温度 (℃)')),
                ('curing_time', models.FloatField(blank=True, null=True, verbose_name='固化时间 (h)')),
                ('process_description', models.TextField(blank=True, verbose_name='工艺描述')),
                ('precautions', models.TextField(blank=True, verbose_name='注意事项')),
                ('properties', models.JSONField(blank=True, default=dict, verbose_name='其他属性')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='formulas', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '配方',
                'verbose_name_plural': '配方',
                'db_table': 'kg_formula',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Intermediate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='中间体编码')),
                ('name', models.CharField(max_length=200, verbose_name='中间体名称')),
                ('intermediate_type', models.CharField(choices=[('prepolymer', '预聚物'), ('resin', '树脂'), ('compound', '复合物'), ('mixture', '混合物'), ('other', '其他')], max_length=20, verbose_name='中间体类型')),
                ('preparation_method', models.TextField(blank=True, verbose_name='制备方法')),
                ('reaction_conditions', models.JSONField(blank=True, default=dict, verbose_name='反应条件')),
                ('viscosity', models.FloatField(blank=True, null=True, verbose_name='粘度')),
                ('solid_content', models.FloatField(blank=True, null=True, verbose_name='固含量 (%)')),
                ('properties', models.JSONField(blank=True, default=dict, verbose_name='其他属性')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intermediates', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '中间体',
                'verbose_name_plural': '中间体',
                'db_table': 'kg_intermediate',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='FormulaComposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component_type', models.CharField(choices=[('intermediate', '中间体'), ('raw_material', '原材料')], max_length=20, verbose_name='组分类型')),
                ('weight_ratio', models.FloatField(verbose_name='质量比 (%)')),
                ('addition_order', models.IntegerField(default=1, verbose_name='添加顺序')),
                ('addition_notes', models.TextField(blank=True, verbose_name='添加说明')),
                ('formula', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='knowledge.formula', verbose_name='配方')),
                ('intermediate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='knowledge.intermediate', verbose_name='中间体')),
            ],
            options={
                'verbose_name': '配方组成',
                'verbose_name_plural': '配方组成',
                'db_table': 'kg_formula_composition',
                'ordering': ['addition_order'],
            },
        ),
        migrations.AddField(
            model_name='formula',
            name='intermediates',
            field=models.ManyToManyField(related_name='formulas', through='knowledge.FormulaComposition', to='knowledge.intermediate', verbose_name='中间体组成'),
        ),
        migrations.CreateModel(
            name='KnowledgeGraphRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation_type', models.CharField(choices=[('raw_to_intermediate', '原材料→中间体'), ('intermediate_to_formula', '中间体→配方'), ('raw_to_formula', '原材料→配方'), ('formula_to_performance', '配方→性能')], max_length=30, verbose_name='关系类型')),
                ('source_type', models.CharField(max_length=50, verbose_name='源节点类型')),
                ('source_id', models.IntegerField(verbose_name='源节点ID')),
                ('source_name', models.CharField(max_length=200, verbose_name='源节点名称')),
                ('target_type', models.CharField(max_length=50, verbose_name='目标节点类型')),
                ('target_id', models.IntegerField(verbose_name='目标节点ID')),
                ('target_name', models.CharField(max_length=200, verbose_name='目标节点名称')),
                ('weight', models.FloatField(default=1.0, verbose_name='关系权重')),
                ('properties', models.JSONField(blank=True, default=dict, verbose_name='关系属性')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '知识图谱关系',
                'verbose_name_plural': '知识图谱关系',
                'db_table': 'kg_relation',
                'indexes': [models.Index(fields=['source_type', 'source_id'], name='kg_relation_source__12adf2_idx'), models.Index(fields=['target_type', 'target_id'], name='kg_relation_target__cfd747_idx'), models.Index(fields=['relation_type'], name='kg_relation_relatio_22cb96_idx')],
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_batch', models.CharField(max_length=50, verbose_name='测试批次')),
                ('test_date', models.DateField(verbose_name='测试日期')),
                ('test_method', models.CharField(choices=[('GB', '国标GB'), ('ISO', '国际标准ISO'), ('ASTM', '美国标准ASTM'), ('internal', '内部标准'), ('other', '其他')], max_length=20, verbose_name='测试标准')),
                ('test_conditions', models.JSONField(blank=True, default=dict, verbose_name='测试条件')),
                ('tensile_strength', models.FloatField(blank=True, null=True, verbose_name='拉伸强度 (MPa)')),
                ('elongation_at_break', models.FloatField(blank=True, null=True, verbose_name='断裂伸长率 (%)')),
                ('tear_strength', models.FloatField(blank=True, null=True, verbose_name='撕裂强度 (N/mm)')),
                ('hardness', models.FloatField(blank=True, null=True, verbose_name='硬度 (Shore A)')),
                ('adhesion_strength', models.FloatField(blank=True, null=True, verbose_name='粘接强度 (MPa)')),
                ('weather_resistance', models.CharField(blank=True, max_length=100, verbose_name='耐候性')),
                ('water_resistance', models.CharField(blank=True, max_length=100, verbose_name='耐水性')),
                ('heat_resistance_temp', models.FloatField(blank=True, null=True, verbose_name='耐热温度 (℃)')),
                ('cold_resistance_temp', models.FloatField(blank=True, null=True, verbose_name='耐寒温度 (℃)')),
                ('viscosity', models.FloatField(blank=True, null=True, verbose_name='粘度 (Pa·s)')),
                ('density', models.FloatField(blank=True, null=True, verbose_name='密度 (g/cm³)')),
                ('tack_free_time', models.FloatField(blank=True, null=True, verbose_name='表干时间 (h)')),
                ('full_cure_time', models.FloatField(blank=True, null=True, verbose_name='完全固化时间 (h)')),
                ('additional_properties', models.JSONField(blank=True, default=dict, verbose_name='其他性能')),
                ('overall_rating', models.IntegerField(blank=True, choices=[(1, '1分'), (2, '2分'), (3, '3分'), (4, '4分'), (5, '5分')], null=True, verbose_name='综合评分')),
                ('notes', models.TextField(blank=True, verbose_name='备注')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('formula', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='knowledge.formula', verbose_name='配方')),
                ('tested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performance_tests', to=settings.AUTH_USER_MODEL, verbose_name='测试人')),
            ],
            options={
                'verbose_name': '性能数据',
                'verbose_name_plural': '性能数据',
                'db_table': 'kg_performance',
                'ordering': ['-test_date'],
            },
        ),
        migrations.CreateModel(
            name='RawMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='原料编码')),
                ('name', models.CharField(max_length=200, verbose_name='原料名称')),
                ('chemical_name', models.CharField(blank=True, max_length=300, verbose_name='化学名称')),
                ('cas_number', models.CharField(blank=True, max_length=50, verbose_name='CAS号')),
                ('material_type', models.CharField(choices=[('polymer', '聚合物'), ('additive', '添加剂'), ('filler', '填料'), ('catalyst', '催化剂'), ('solvent', '溶剂'), ('other', '其他')], max_length=20, verbose_name='材料类型')),
                ('molecular_formula', models.CharField(blank=True, max_length=200, verbose_name='分子式')),
                ('molecular_weight', models.FloatField(blank=True, null=True, verbose_name='分子量')),
                ('density', models.FloatField(blank=True, null=True, verbose_name='密度 (g/cm³)')),
                ('viscosity', models.FloatField(blank=True, null=True, verbose_name='粘度 (Pa·s)')),
                ('supplier', models.CharField(blank=True, max_length=200, verbose_name='供应商')),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='单价')),
                ('properties', models.JSONField(blank=True, default=dict, verbose_name='其他属性')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='raw_materials', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '原材料',
                'verbose_name_plural': '原材料',
                'db_table': 'kg_raw_material',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='IntermediateComposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight_ratio', models.FloatField(verbose_name='质量比 (%)')),
                ('addition_order', models.IntegerField(default=1, verbose_name='添加顺序')),
                ('addition_temperature', models.FloatField(blank=True, null=True, verbose_name='添加温度 (℃)')),
                ('addition_notes', models.TextField(blank=True, verbose_name='添加说明')),
                ('intermediate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knowledge.intermediate', verbose_name='中间体')),
                ('raw_material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knowledge.rawmaterial', verbose_name='原材料')),
            ],
            options={
                'verbose_name': '中间体组成',
                'verbose_name_plural': '中间体组成',
                'db_table': 'kg_intermediate_composition',
                'unique_together': {('intermediate', 'raw_material')},
            },
        ),
        migrations.AddField(
            model_name='intermediate',
            name='raw_materials',
            field=models.ManyToManyField(related_name='intermediates', through='knowledge.IntermediateComposition', to='knowledge.rawmaterial', verbose_name='原材料组成'),
        ),
        migrations.AddField(
            model_name='formulacomposition',
            name='raw_material',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='knowledge.rawmaterial', verbose_name='原材料'),
        ),
    ]
